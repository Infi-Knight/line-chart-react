{"version":3,"sources":["../../src/constants.js","../../src/LineChartDrawer.js","../../src/Canvas.js","../../src/LineChart.js","App.js","index.js"],"names":["DEFAULT_LINE_STYLES","lineColor","lineWidht","LineChartDrawer","constructor","showAxes","this","canvas","getContext","maxX","maxY","Math","rangeX","rangeY","getLongestValueWidth","padding","width","height","longestValueWidth","n","value","context","measureText","drawXAxis","y","x","label","drawYAxis","drawLine","data","color","point","transformContext","Canvas","chartItems","lineCharDrawerInput","canvasRef","useRef","useEffect","lineChartDrawer","item","styles","lineWidth","chartConfig","id","ref","minX","minY","unitsPerTickX","unitsPerTickY","points","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6b0b482.chunk.js","sourcesContent":["export const PADDING = 10\nexport const TICK_SIZE = 10\nexport const POINT_RADIUS = 5\nexport const FONT_HEIGHT = 12\nexport const DEFAULT_LINE_STYLES = { lineColor: 'black', lineWidht: 2 }\n","import { PADDING, TICK_SIZE, POINT_RADIUS, FONT_HEIGHT } from './constants'\n\nexport class LineChartDrawer {\n  constructor({\n    canvas,\n    minX,\n    minY,\n    maxX,\n    maxY,\n    unitsPerTickX,\n    unitsPerTickY,\n    showAxes\n  }) {\n    this.canvas = canvas\n    this.minX = minX\n    this.minY = minY\n    this.maxX = maxX\n    this.maxY = maxY\n    this.unitsPerTickX = unitsPerTickX\n    this.unitsPerTickY = unitsPerTickY\n\n    this.padding = PADDING\n    this.tickSize = TICK_SIZE\n    this.pointRadius = POINT_RADIUS\n    this.fontHeight = FONT_HEIGHT // prevent axes labels from getting cutoff\n\n    this.context = this.canvas.getContext('2d')\n    this.rangeX = this.maxX - this.minY\n    this.rangeY = this.maxY - this.minY\n    this.numXTicks = Math.round(this.rangeX / this.unitsPerTickX)\n    this.numYTicks = Math.round(this.rangeY / this.unitsPerTickY)\n    this.x = this.getLongestValueWidth() + this.padding * 2\n    this.y = this.padding * 2\n    this.width = this.canvas.width - this.x - this.padding * 2\n    this.height = this.canvas.height - this.y - this.padding - this.fontHeight\n    this.scaleX = this.width / this.rangeX\n    this.scaleY = this.height / this.rangeY\n\n    // draw x y axis and tick marks\n    if (showAxes) {\n      this.drawXAxis()\n      this.drawYAxis()\n    }\n  }\n\n  getLongestValueWidth() {\n    this.context.font = this.font\n    let longestValueWidth = 0\n    for (let n = 0; n <= this.numYTicks; n++) {\n      const value = this.maxY - n * this.unitsPerTickY\n      longestValueWidth = Math.max(\n        longestValueWidth,\n        this.context.measureText(value).width\n      )\n    }\n    return longestValueWidth\n  }\n\n  drawXAxis() {\n    const context = this.context\n    context.save()\n    context.beginPath()\n    context.moveTo(this.x, this.y + this.height)\n    context.lineTo(this.x + this.width, this.y + this.height)\n    context.lineWidth = 2\n    context.stroke()\n\n    // draw tick marks\n    for (let n = 0; n < this.numXTicks; n++) {\n      context.beginPath()\n      context.moveTo(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height\n      )\n      context.lineTo(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height - this.tickSize\n      )\n      context.stroke()\n    }\n\n    // draw labels\n    context.font = this.font\n    context.fillStyle = 'black'\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n\n    for (let n = 0; n < this.numXTicks; n++) {\n      const label = Math.round(((n + 1) * this.maxX) / this.numXTicks)\n      context.save()\n      context.translate(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height + this.padding\n      )\n      context.fillText(label, 0, 0)\n      context.restore()\n    }\n    context.restore()\n  }\n\n  drawYAxis() {\n    const context = this.context\n    context.save()\n    context.beginPath()\n    context.moveTo(this.x, this.y)\n    context.lineTo(this.x, this.y + this.height)\n    context.lineWidth = 2\n    context.stroke()\n    context.restore()\n\n    // draw tick marks\n    for (let n = 0; n < this.numYTicks; n++) {\n      context.beginPath()\n      context.moveTo(this.x, (n * this.height) / this.numYTicks + this.y)\n      context.lineTo(\n        this.x + this.tickSize,\n        (n * this.height) / this.numYTicks + this.y\n      )\n      context.stroke()\n    }\n\n    // draw values\n    context.font = this.font\n    context.fillStyle = 'black'\n    context.textAlign = 'right'\n    context.textBaseline = 'middle'\n\n    for (let n = 0; n < this.numYTicks; n++) {\n      const value = Math.round(this.maxY - (n * this.maxY) / this.numYTicks)\n      context.save()\n      context.translate(\n        this.x - this.padding,\n        (n * this.height) / this.numYTicks + this.y\n      )\n      context.fillText(value, 0, 0)\n      context.restore()\n    }\n    context.restore()\n  }\n\n  drawLine(data, color, width) {\n    const context = this.context\n    context.save()\n    this.transformContext()\n    context.lineWidth = width\n    context.strokeStyle = color\n    context.fillStyle = color\n    context.beginPath()\n    context.moveTo(data[0].x * this.scaleX, data[0].y * this.scaleY)\n\n    for (let n = 0; n < data.length; n++) {\n      const point = data[n]\n\n      // draw segment\n      context.lineTo(point.x * this.scaleX, point.y * this.scaleY)\n      context.stroke()\n      context.closePath()\n      context.beginPath()\n      context.arc(\n        point.x * this.scaleX,\n        point.y * this.scaleY,\n        this.pointRadius,\n        0,\n        2 * Math.PI,\n        false\n      )\n      context.fill()\n      context.closePath()\n\n      // position for next segment\n      context.beginPath()\n      context.moveTo(point.x * this.scaleX, point.y * this.scaleY)\n    }\n    context.restore()\n  }\n\n  transformContext() {\n    const context = this.context\n    // move context to center of canvas\n    this.context.translate(this.x, this.y + this.height)\n    // invert the y scale so that it increments\n    // as you move upwards\n    context.scale(1, -1)\n  }\n}\n","import React, { useRef, useEffect } from 'react'\n\nimport { DEFAULT_LINE_STYLES } from './constants'\nimport { LineChartDrawer } from './LineChartDrawer'\n\nexport const Canvas = ({ chartConfig, chartItems }) => {\n  const { id, height, width, ...lineCharDrawerInput } = chartConfig\n\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const lineChartDrawer = new LineChartDrawer({\n      ...lineCharDrawerInput,\n      canvas\n    })\n\n    chartItems.forEach((item) => {\n      const {\n        points,\n        styles: { lineColor, lineWidth } = { ...DEFAULT_LINE_STYLES }\n      } = item\n      lineChartDrawer.drawLine(points, lineColor, lineWidth)\n    })\n  }, [LineChartDrawer, chartConfig, chartItems])\n\n  return <canvas id={id} height={height} width={width} ref={canvasRef} />\n}\n","import React from 'react'\n\nimport { Canvas } from './Canvas'\n\nexport const LineChart = ({ chartItems, chartConfig }) => {\n  return <Canvas chartItems={chartItems} chartConfig={chartConfig} />\n}\n","import React from 'react'\n\nimport LineChart from '@infi-knight/line-chart-react'\n\nconst chartConfig = {\n  id: 'myCanvas',\n  minX: 0,\n  maxX: 150,\n  minY: 0,\n  maxY: 120,\n  height: 500,\n  width: 500,\n  unitsPerTickX: 10,\n  unitsPerTickY: 10,\n  showAxes: true\n}\n\nconst chartItems = [\n  {\n    styles: { lineColor: 'blue', lineWidth: 2 },\n    points: [\n      {\n        x: 0,\n        y: 0\n      },\n      {\n        x: 20,\n        y: 10\n      },\n      {\n        x: 40,\n        y: 15\n      },\n      {\n        x: 60,\n        y: 40\n      },\n      {\n        x: 80,\n        y: 60\n      },\n      {\n        x: 100,\n        y: 50\n      },\n      {\n        x: 120,\n        y: 85\n      },\n      {\n        x: 140,\n        y: 100\n      }\n    ]\n  },\n  {\n    styles: { lineColor: 'red', lineWidth: 8 },\n    points: [\n      {\n        x: 20,\n        y: 85\n      },\n      {\n        x: 40,\n        y: 75\n      },\n      {\n        x: 60,\n        y: 75\n      },\n      {\n        x: 80,\n        y: 45\n      },\n      {\n        x: 100,\n        y: 65\n      },\n      {\n        x: 120,\n        y: 40\n      },\n      {\n        x: 140,\n        y: 35\n      }\n    ]\n  }\n]\n\nconst App = () => {\n  return <LineChart chartItems={chartItems} chartConfig={chartConfig} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}