{"version":3,"sources":["../../src/constants.js","../../src/LineChartDrawer.js","../../src/scalefix.js","../../src/Canvas.js","../../src/LineChart.js","App.js","index.js"],"names":["DEFAULT_LINE_STYLES","lineColor","lineWidth","LineChartDrawer","canvas","minX","minY","maxX","maxY","unitsPerTickX","unitsPerTickY","showAxes","this","getContext","Math","rangeX","rangeY","getLongestValueWidth","padding","width","height","longestValueWidth","n","value","context","measureText","drawXAxis","y","x","label","drawYAxis","drawLine","data","point","transformContext","scaleCanvasForHiDpi","ratio","window","Canvas","chartConfig","chartItems","id","lineChartDrawerInput","canvasRef","useRef","useEffect","lineChartDrawer","points","item","ref","styles","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16a20a55.chunk.js","sourcesContent":["export const PADDING = 32\nexport const TICK_SIZE = 10\nexport const POINT_RADIUS = 8\nexport const FONT_HEIGHT = 16\nexport const DEFAULT_LINE_STYLES = { lineColor: 'rebeccapurple', lineWidth: 2 }\nexport const FONT = '2rem serif'\n","import {\n  PADDING,\n  TICK_SIZE,\n  POINT_RADIUS,\n  FONT_HEIGHT,\n  FONT\n} from './constants'\n\nexport class LineChartDrawer {\n  constructor({\n    canvas,\n    minX,\n    minY,\n    maxX,\n    maxY,\n    unitsPerTickX,\n    unitsPerTickY,\n    showAxes\n  }) {\n    this.canvas = canvas\n    this.minX = minX\n    this.minY = minY\n    this.maxX = maxX\n    this.maxY = maxY\n    this.unitsPerTickX = unitsPerTickX\n    this.unitsPerTickY = unitsPerTickY\n\n    this.padding = PADDING\n    this.tickSize = TICK_SIZE\n    this.pointRadius = POINT_RADIUS\n    this.fontHeight = FONT_HEIGHT // prevent axes labels from getting cutoff\n    this.font = FONT\n\n    this.context = this.canvas.getContext('2d')\n    this.rangeX = this.maxX - this.minY\n    this.rangeY = this.maxY - this.minY\n    this.numXTicks = Math.round(this.rangeX / this.unitsPerTickX)\n    this.numYTicks = Math.round(this.rangeY / this.unitsPerTickY)\n    this.x = this.getLongestValueWidth() + this.padding * 2\n    this.y = this.padding * 2\n    this.width = this.canvas.width - this.x - this.padding * 2\n    this.height = this.canvas.height - this.y - this.padding - this.fontHeight\n    this.scaleX = this.width / this.rangeX\n    this.scaleY = this.height / this.rangeY\n\n    // draw x y axis and tick marks\n    if (showAxes) {\n      this.drawXAxis()\n      this.drawYAxis()\n    }\n  }\n\n  getLongestValueWidth() {\n    this.context.font = this.font\n    let longestValueWidth = 0\n    for (let n = 0; n <= this.numYTicks; n++) {\n      const value = this.maxY - n * this.unitsPerTickY\n      longestValueWidth = Math.max(\n        longestValueWidth,\n        this.context.measureText(value).width\n      )\n    }\n    return longestValueWidth\n  }\n\n  drawXAxis() {\n    const context = this.context\n    context.save()\n    context.beginPath()\n    context.moveTo(this.x, this.y + this.height)\n    context.lineTo(this.x + this.width, this.y + this.height)\n    context.lineWidth = 2\n    context.stroke()\n\n    // draw tick marks\n    for (let n = 0; n < this.numXTicks; n++) {\n      context.beginPath()\n      context.moveTo(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height\n      )\n      context.lineTo(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height - this.tickSize\n      )\n      context.stroke()\n    }\n\n    // draw labels\n    context.font = this.font\n    context.fillStyle = 'black'\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n\n    for (let n = 0; n < this.numXTicks; n++) {\n      const label = Math.round(((n + 1) * this.maxX) / this.numXTicks)\n      context.save()\n      context.translate(\n        ((n + 1) * this.width) / this.numXTicks + this.x,\n        this.y + this.height + this.padding\n      )\n      context.fillText(label, 0, 0)\n      context.restore()\n    }\n    context.restore()\n  }\n\n  drawYAxis() {\n    const context = this.context\n    context.save()\n    context.beginPath()\n    context.moveTo(this.x, this.y)\n    context.lineTo(this.x, this.y + this.height)\n    context.lineWidth = 2\n    context.stroke()\n    context.restore()\n\n    // draw tick marks\n    for (let n = 0; n < this.numYTicks; n++) {\n      context.beginPath()\n      context.moveTo(this.x, (n * this.height) / this.numYTicks + this.y)\n      context.lineTo(\n        this.x + this.tickSize,\n        (n * this.height) / this.numYTicks + this.y\n      )\n      context.stroke()\n    }\n\n    // draw values\n    context.font = this.font\n    context.fillStyle = 'black'\n    context.textAlign = 'right'\n    context.textBaseline = 'middle'\n\n    for (let n = 0; n < this.numYTicks; n++) {\n      const value = Math.round(this.maxY - (n * this.maxY) / this.numYTicks)\n      context.save()\n      context.translate(\n        this.x - this.padding,\n        (n * this.height) / this.numYTicks + this.y\n      )\n      context.fillText(value, 0, 0)\n      context.restore()\n    }\n    context.restore()\n  }\n\n  drawLine(data, color, width) {\n    const context = this.context\n    context.save()\n    this.transformContext()\n    context.lineWidth = width\n    context.strokeStyle = color\n    context.fillStyle = color\n    context.beginPath()\n    context.moveTo(data[0].x * this.scaleX, data[0].y * this.scaleY)\n\n    for (let n = 0; n < data.length; n++) {\n      const point = data[n]\n\n      // draw segment\n      context.lineTo(point.x * this.scaleX, point.y * this.scaleY)\n      context.stroke()\n      context.closePath()\n      context.beginPath()\n      context.arc(\n        point.x * this.scaleX,\n        point.y * this.scaleY,\n        this.pointRadius,\n        0,\n        2 * Math.PI,\n        false\n      )\n      context.fill()\n      context.closePath()\n\n      // position for next segment\n      context.beginPath()\n      context.moveTo(point.x * this.scaleX, point.y * this.scaleY)\n    }\n    context.restore()\n  }\n\n  transformContext() {\n    const context = this.context\n    // move context to center of canvas\n    this.context.translate(this.x, this.y + this.height)\n    // invert the y scale so that it increments\n    // as you move upwards\n    context.scale(1, -1)\n  }\n}\n","export const scaleCanvasForHiDpi = (canvas, height, width) => {\n  const ratio = window.devicePixelRatio\n  canvas.height = height * ratio\n  canvas.width = width * ratio\n\n  canvas.style.height = height + 'px'\n  canvas.style.width = width + 'px'\n}\n","import React, { useRef, useEffect } from 'react'\n\nimport { DEFAULT_LINE_STYLES } from './constants'\nimport { LineChartDrawer } from './LineChartDrawer'\nimport { scaleCanvasForHiDpi } from './scalefix'\n\nexport const Canvas = ({ chartConfig, chartItems }) => {\n  const { id, height, width, ...lineChartDrawerInput } = chartConfig\n\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    const canvas = canvasRef.current\n\n    // scale the canvas appropriately for retina screens\n    scaleCanvasForHiDpi(canvas, height, width)\n\n    const lineChartDrawer = new LineChartDrawer({\n      ...lineChartDrawerInput,\n      canvas\n    })\n\n    chartItems.forEach((item) => {\n      const {\n        points,\n        styles: { lineColor, lineWidth } = { ...DEFAULT_LINE_STYLES }\n      } = item\n      lineChartDrawer.drawLine(points, lineColor, lineWidth)\n    })\n  }, [LineChartDrawer, chartConfig, chartItems, scaleCanvasForHiDpi])\n\n  return <canvas id={id} height={height} width={width} ref={canvasRef} />\n}\n","import React from 'react'\n\nimport { Canvas } from './Canvas'\n\nexport const LineChart = ({ chartItems, chartConfig }) => {\n  return <Canvas chartItems={chartItems} chartConfig={chartConfig} />\n}\n","import React from 'react'\n\nimport LineChart from '@infi-knight/line-chart-react'\n\nconst chartConfig = {\n  id: 'myCanvas',\n  minX: 0,\n  maxX: 150,\n  minY: 0,\n  maxY: 120,\n  height: 500,\n  width: 500,\n  unitsPerTickX: 10,\n  unitsPerTickY: 10,\n  showAxes: true\n}\n\nconst chartItems = [\n  {\n    styles: { lineColor: 'blue', lineWidth: 2 },\n    points: [\n      {\n        x: 0,\n        y: 0\n      },\n      {\n        x: 20,\n        y: 10\n      },\n      {\n        x: 40,\n        y: 15\n      },\n      {\n        x: 60,\n        y: 40\n      },\n      {\n        x: 80,\n        y: 60\n      },\n      {\n        x: 100,\n        y: 50\n      },\n      {\n        x: 120,\n        y: 85\n      },\n      {\n        x: 140,\n        y: 100\n      }\n    ]\n  },\n  {\n    styles: { lineColor: 'red', lineWidth: 8 },\n    points: [\n      {\n        x: 20,\n        y: 85\n      },\n      {\n        x: 40,\n        y: 75\n      },\n      {\n        x: 60,\n        y: 75\n      },\n      {\n        x: 80,\n        y: 45\n      },\n      {\n        x: 100,\n        y: 65\n      },\n      {\n        x: 120,\n        y: 40\n      },\n      {\n        x: 140,\n        y: 35\n      }\n    ]\n  }\n]\n\nconst App = () => {\n  return <LineChart chartItems={chartItems} chartConfig={chartConfig} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}